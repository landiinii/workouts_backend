# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan`. On push events
# to the main branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform

name: "Prod: Terraform Continuous Integration And Deployment"

on:
  push:
    branches:
      - "main"
    paths:
      - "prod/**"
  pull_request:
    branches:
      - "main"
    paths:
      - "prod/**"

jobs:
  terraform:
    name: "Terraform Prod"
    runs-on: ubuntu-latest
    environment: prod

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: prod/infrastructure

    steps:
      # Checkout the repository to the GitHub Actions runner

      - name: Checkout
        uses: actions/checkout@v2

      # Configure AWS profile and Git Key

      - name: Add AWS profile and Git key settings
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_PROD_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PROD_SECRET_KEY }}

        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY --profile prod
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile prod
          git config --global url."https://oauth2:${{ secrets.GHA_RUNNER_TOKEN }}@github.com".insteadOf https://github.com

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      # Build the Lambda Functions
      - name: Build Niches Lambda
        id: buildNiches
        working-directory: prod/NichesFunction
        run: GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o main .

      - name: Build Results Lambda
        id: buildResults
        working-directory: prod/ResultsFunction
        run: GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o main .

      - name: Build Keywords Lambda
        id: buildKeywords
        working-directory: prod/KeywordsFunction
        run: GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o main .

      # Zip up the Lambda Functions
      - name: Zip Niches Lambda
        id: zipNiches
        working-directory: prod/NichesFunction
        run: zip -q -r main.zip main

      - name: Zip Results Lambda
        id: zipResults
        working-directory: prod/ResultsFunction
        run: zip -q -r main.zip main

      - name: Zip Keywords Lambda
        id: zipKeywords
        working-directory: prod/KeywordsFunction
        run: zip -q -r main.zip main

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.

      - name: "Terraform Init"
        id: init
        run: terraform init
      # Checks that all Terraform configuration files adhere to a canonical format.

      - name: Terraform Format
        id: fmt
        run: terraform fmt --recursive

      # Generates an execution plan for Terraform

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      # Update Pull Request adds a comment to the pull request with the results of the format, init and plan steps

      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GHA_RUNNER_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      # Terraform Plan Status returns whether a plan was successfully generated or not.
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      # Terraform Apply applies the configuration. This step will only run when a commit is pushed to stage

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
